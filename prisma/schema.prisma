// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    // url      = "file:./db.sqlite"
    url      = env("DATABASE_URL")
}

// model Example {
//     id String @id @default(cuid())
// }

model Event {
    id               String   @id @default(auto()) @map("_id") @db.ObjectId
    title            String
    description      String
    location         String
    dateTime         DateTime
    totalTickets     Int?
    likeCount        Int?
    showTotalTickets Boolean? @default(false)
    creator          User?    @relation(fields: [userId], references: [id])
    userId           String?  @db.ObjectId
    tickets          Ticket[]
}

model Ticket {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    type        String
    cost        Float
    event       Event    @relation(fields: [eventId], references: [id])
    addons      String[]
    ticketCount Int
    saleCount   Int      @default(0)
    eventId     String   @db.ObjectId
    user        User?    @relation(fields: [userId], references: [id])
    userId      String?  @db.ObjectId
}

// Many-to-Many relations model between Event and User
// model EventFave {
//     id      String  @id @default(auto()) @map("_id") @db.ObjectId
//     user    User?   @relation(fields: [userId], references: [id])
//     userId  String? @db.ObjectId
//     event   Event?  @relation(fields: [eventId], references: [id])
//     eventId String? @db.ObjectId
// }

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime? @map("email_verified")
    image         String?
    accounts      Account[]
    sessions      Session[]
    faveEvents    Event[]
    tickets       Ticket[]
    role          Role      @default(USER)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("users")
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}

// Role enum
enum Role {
    USER
    PLANNER
    PROMOTER
}
